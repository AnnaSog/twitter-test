{"version":3,"sources":["components/app-header/app-header.js","components/app-header/index.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/app.js","components/app/index.js","index.js"],"names":["Header","styled","div","props","colored","AppHeader","liked","allPosts","SearchPanel","state","term","onUpdateSearch","bind","e","target","value","this","setState","className","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","map","clazz","filter","onClick","onFilterSelect","PostListItem","onDelete","onToggleImportant","onToggleLiked","classNames","important","like","PostList","posts","onDeletePost","elements","item","obj","key","isEmpty","id","itemProps","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","AppBlock","App","data","deleteItem","addItem","onToggle","maxId","elem","body","newItem","index","findIndex","oldItem","slice","items","length","indexOf","visiblePosts","filterPost","searchPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1d4bcef.chunk.js","sourcesContent":["import React from 'react';\nimport './app-header.css';\nimport styled from 'styled-components';\n\nconst Header = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n    h1 {\n        font-size: 26px;\n        color: ${props => props.colored ? 'black' : 'red'}; \n        :hover{\n            color:red;\n        }\n    }\n    h2 {\n        font-size: 1.2rem;\n        color: grey;\n    }\n`\n//прописано условие, если передан аргумент colored, то красим в черный, если нет - в красный\n\nconst AppHeader = ({liked, allPosts}) =>{\n    return (\n        <Header colored>\n            <h1>Anna Sogbatyan</h1>\n            <h2>{allPosts} записей, из них понравилось {liked} </h2>\n        </Header>\n    )\n}\nexport default AppHeader;","import AppHeader from \"./app-header\";\nexport default AppHeader;","import SearchPanel from \"./search-panel\";\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\nimport './search-panel.css';\r\n\r\nexport default class SearchPanel extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n    }\r\n\r\n\r\n    onUpdateSearch(e) { //e - следит за тем, что вносят в input\r\n        const term = e.target.value; //получаем данные, ктр внес пользователь\r\n        this.setState({\r\n            term: term\r\n        });\r\n        this.props.onUpdateSearch(term); //передаем в виде props,т.к. term нужно обновить не только здесь, но и app.js, onUpdateSearch записан в app.js\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <input \r\n                className='form-control search-input'\r\n                type='text'\r\n                placeholder='Поиск по записям'\r\n                value={this.state.term}\r\n                onChange = {this.onUpdateSearch} //onChange - польз.вносит инфо, onUpdateSearch - будет следить, что вносит польз и изм state\r\n            />  \r\n        )\r\n    }\r\n\r\n}\r\n\r\n","import PostStatusFilter from \"./post-status-filter\";\nexport default PostStatusFilter;\n","import React, {Component} from 'react';\r\n\r\nimport './post-status-filter.css';\r\n\r\nexport default class PostStatusFilter extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.buttons = [\r\n            {name: 'all', label: 'Все'},\r\n            {name: 'like', label: 'Понравилось'}\r\n        ]  \r\n    }\r\n\r\n    render(){\r\n        const buttons = this.buttons.map(({name, label}) => { //map -перебирает и создает новый[] с указан. в return данными \r\n            const active = this.props.filter === name;     //this.props.filter - приходит из app.js <PostStatusFilter/>\r\n            const clazz = active ? 'btn-info' : 'btn-outline-secondary' //если выбранная кнопка становится активной, не выбранная не активн\r\n\r\n            return(\r\n                <button \r\n                    key={name} \r\n                    type='button' \r\n                    className={`btn ${clazz}`}\r\n                    onClick = {() => this.props.onFilterSelect(name)} //эта фун-ия приходит как props из app.js <PostStatusFilter/>\r\n                >\r\n                    {label}\r\n                </button>\r\n            )\r\n        });\r\n\r\n        return(\r\n            <div className='btn-group'>\r\n                {buttons}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","\nimport PostListItem from \"./post-list-item\";\nexport default PostListItem;","import React, {Component} from 'react';\r\nimport './post-list-item.css';\r\n\r\nexport default class PostListItem extends Component{  //посты будте изм.(лайки, важность, фильтр) из-за создаем class\r\n    \r\n    //ЭТО УЖЕ НЕАКТУАЛЬНО ИЗ-ЗА ТОГО, ЧТО СОЗДАНЫ НОВЫЕ ФУН-ИИ onToggleImportant И onToggleLiked В APP.JS, КТР СВЯЗЫВАЮ С HEADER С ПОДСЧЕТОМ \r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {      //state -пользователь сможет изм состоние, т.е. указать важный пост или нет\r\n    //         important: false,\r\n    //         like: false\r\n    //     }\r\n\r\n    //     //чтобы обработчик сработал, необходимо его привязать к this. Каждый новый обект получит этот метод \r\n    //     this.onImportant = this.onImportant.bind(this);\r\n    //     this.onLike = this.onLike.bind(this);\r\n    // }\r\n\r\n    // //создаем сам метод, ктр сработает при клике на звезду и он будет изменять состояние с важного на не важный и наоборот\r\n    // onImportant() {\r\n    //     this.setState(({important})=> ({   //Только с помощью setState сможем зменить состоние \r\n    //         important: !important          //если был важным станет не важным \r\n    //     }))\r\n    // }\r\n\r\n    // onLike() {\r\n    //     this.setState(({like})=> ({   \r\n    //         like: !like          \r\n    //     }))\r\n    // }\r\n    \r\n    render(){ //создает эл. и помещает на стр\r\n\r\n        const {label, onDelete, onToggleImportant, onToggleLiked, important, like} = this.props; //это св-во ктр будет приходит из app.js\r\n        let classNames = 'app-list-item d-flex justify-content-between';\r\n\r\n        if(important){          //если important указан, т.е. true, \r\n            classNames += ' important'; //то к классам добавляется стиль important и ВАЖНО указать пробел, т.к.добавляется к строке\r\n        }\r\n        if(like){          //если like указан, т.е. true, \r\n            classNames += ' like'; //то к классам добавляется стиль like и ВАЖНО указать пробел, т.к.добавляется к строке\r\n        }\r\n\r\n\r\n        return(\r\n            <div className={classNames}>\r\n                <span className='app-list-item-label' onClick = {onToggleLiked}>\r\n                    {label}\r\n                </span>\r\n                <div className='d-flex justify-content-center aling-item-center'>\r\n                    <button type='button'className='btn-star btn-sm' onClick = {onToggleImportant} >\r\n                        <i className='fa fa-star'></i>\r\n                    </button>\r\n                    <button type='button' className='btn-trash btn-sm' onClick = {onDelete}> \r\n                        <i className='fa fa-trash'></i>\r\n                    </button>\r\n                    <button type='button'className='btn-heart btn-sm' onClick = {onToggleLiked} >\r\n                        <i className='fa fa-heart'></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//При нажатии на кнопку мусор срабатывает событие onClick, ктр запускает фун-ии и посл фун-ия заканивается на deleteItem\r\n","import PostList from \"./post-list\";\nexport default PostList;","import React from 'react';\nimport './post-list.css';\n\nimport PostListItem from '../post-list-item';\n\nconst PostList = ({posts, onDeletePost, onToggleImportant, onToggleLiked}) => { //эти props получаем из app.js\n\n    const elements = posts.map((item) =>{  //map-проходит по каждому [], трансформирует и записывает как новый эл.\n\n        // Простой способ проверки на объект + содержится ли в нем информация\n        if ( typeof item === 'object' && isEmpty(item) ){ \n\n            const {id, ...itemProps} = item;\n            return (\n                <li key = {id} className='list-group-item'>\n                    <PostListItem \n                        {...itemProps} \n                        onDelete={() => onDeletePost(id)} //props с фун-ией по удалению постов передается в кнопку в PostListItem\n                        onToggleImportant = {() => onToggleImportant(id)} //теперь каждый пост знает об этих обработчиках событий\n                        onToggleLiked = {() => onToggleLiked(id)}\n                    />\n                </li>\n            )\n            \n            // return(\n            //     <li className='list-group-item'>\n            //        <PostListItem \n                //        label={item.label} \n                //        important = {item.important}/>  \n            //     </li>\n            // )\n        }\n    });\n\n    function isEmpty(obj) {\n        for(let key in obj)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    return(\n        <ul className='app-list list-group'>\n            {elements}\n        </ul>\n    )\n}\n\n//important -звездочка, если не указан, то поумолчанию false\n\nexport default PostList;","import PostAddForm from \"./post-add-form\";\nexport default PostAddForm;","import React, {Component} from 'react';\nimport './post-add-form.css';\n\nexport default class PostAddForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: ''\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n\n    }\n\n    onValueChange(e){    //если обращаемся к input и нужен его value, то необходимо использовать event(e)\n        this.setState({\n            text: e.target.value //в текст указываем информацию, ктр внес пользователь в input\n        });\n    }\n\n    onSubmit(e){\n        e.preventDefault();\n        this.props.onAdd(this.state.text) //в text state заменяется на новый пост по шаблону onAdd с инфо от полльз.\n        this.setState({\n            text: ''        //после отправки информации, input снова очищается \n        });\n    }\n\n    render() {\n        return(\n            <form \n                className='bottom-panel d-flex'\n                onSubmit = {this.onSubmit}  //пользователь отправляет сообщение\n                > \n                <input \n                    type='text'\n                    placeholder='О чем вы думаете сейчас?'\n                    className='form-control new-post-label'\n                    onChange = {this.onValueChange} //пользователь вносит текст в input\n                    value = {this.state.text}   //связали input со состоянием (state), чтобы можно было настроить очистку состояния \n                />\n                <button \n                    type='submit'\n                    className='btn btn-outline-secondary'>\n                    Добавить\n                </button>\n            </form>\n        )\n    }\n}\n\n","import React, {Component} from 'react';\r\n\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostList from '../post-list';\r\nimport PostAddForm from '../post-add-form';\r\n\r\nimport './app.css';\r\nimport styled from 'styled-components';\r\n\r\nconst AppBlock = styled.div`  \r\n    margin: 0 auto;\r\n    max-width: 800px;\r\n`\r\n// вместо div указываем эл ктр хотим создать\r\n\r\nexport default class App extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {      //state -пользователь сможет изм состоние\r\n            data: [\r\n                {label: 'Going to learn React', important: true, like:false, id: 1},\r\n                {label: 'That is so good', important: false, like:false, id: 2},\r\n                {label: 'I need a break...', important: false, like:false, id: 3}\r\n            ],\r\n            term: '', //поиск поста\r\n            filter: 'all' //по умолчанию будет показывать все посты\r\n        };\r\n\r\n        //чтобы обработчик c фун-ей сработал, необходимо его привязать к this, иначе при render эту фун-ию не увидит. Каждый новый обект получит этот метод \r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggle = this.onToggle.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n\r\n        this.maxId = 4; //новый пост будет id:4\r\n    }\r\n\r\n    deleteItem(id){\r\n        this.setState(({data}) => {\r\n            const newArr = data.filter((elem) => elem.id !== id); //каждый elem в посте, filter создаем новый[] с изменениями\r\n            return {\r\n                data: newArr //в data запишем скопированный, но изменный []\r\n            };\r\n        });\r\n    }\r\n\r\n    addItem(body){  \r\n        const newItem = {   //шаблон нового поста \r\n            label: body,\r\n            important: false,\r\n            id: this.maxId++\r\n        };\r\n\r\n        this.setState(({data}) => {\r\n            const newArr = [...data, newItem]; //...data - все содержание data + новый пост \r\n            return {\r\n                data: newArr\r\n            };\r\n        });\r\n    }\r\n\r\n    onToggle(id, item){\r\n        this.setState(({data}) => {   //будем изменять содержание data\r\n            const index = data.findIndex(elem => elem.id === id); //узнаем какой именно пост изменяем, для этого id со звездой поста должен совпасть с id data\r\n\r\n            \r\n            const oldItem = data[index]; //конкретный пост в data\r\n            const newItem = {...oldItem, [item]: !oldItem[item]} //создаем новый объект для замены старого с изменениями, [item] - не [], а способ задать ключ объекта, пример, !oldItem.important - если был false, то станет true и наоброт\r\n\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n            //...data.slice(0, index) - это с 1-го поста до нужного, вставляем изменный пост, ...data.slice(index + 1) - сл. пост от нужного\r\n\r\n            return{\r\n                data: newArr\r\n            };    \r\n        });\r\n    }\r\n\r\n    onToggleImportant(id){\r\n        this.onToggle(id, 'important');   \r\n    }\r\n    onToggleLiked(id){\r\n        this.onToggle(id, 'like');\r\n    }\r\n\r\n    searchPost(items, term) {   //поиск поиска содержит items - данные всех постов, term - инфо того, что ищет польз.\r\n        if(term.length === 0){  //если польз. ничего не внес или стер\r\n            return items        //отражаются все данные(все посты)\r\n        } else {\r\n            return items.filter((item) => {  //filter -создаст новый массив c постами, начимаем их перебирать \r\n                return item.label.indexOf(term) > -1  //получем пост с нужной с инфо(label), ктр ищет польз.(indexOf(term)), > -1 -все посты, ктр подходят \r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    filterPost(items, filter) { //items - все посты\r\n        if(filter === 'like') {                        \r\n            return items.filter(item => item.like); //перебираем все посты и получаем новый[] с постами like = true\r\n        } else {\r\n            return items;    //если нет, будут отражаться все посты\r\n        }\r\n    }\r\n\r\n    \r\n    onUpdateSearch(term) {\r\n        this.setState({\r\n            term: term\r\n        });\r\n    }\r\n\r\n    onFilterSelect(filter){ //фун-ия будет запускаться при клике на кнопку\r\n        this.setState({      //и менять состояние в state на тот ктр кликнули\r\n            filter: filter\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {data, term, filter} = this.state;\r\n\r\n        const liked = data.filter(elem => elem.like).length; //filter- создает новый [] c лайками(true) и получаем их кол-во\r\n        const allPosts = data.length; //кол-во всех постов \r\n\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter);\r\n\r\n        return(\r\n            <AppBlock>\r\n                <AppHeader\r\n                    liked ={liked} //отлайканые посты\r\n                    allPosts = {allPosts} //все посты \r\n                /> \r\n                <div className='search-panel d-flex'>\r\n                    <SearchPanel \r\n                        onUpdateSearch={this.onUpdateSearch}\r\n                    />\r\n                    <PostStatusFilter\r\n                        filter = {filter} //передаем из state инфо сюда, что активна кнопка all\r\n                        onFilterSelect = {this.onFilterSelect} //Эта фун-ия будет запускаться при клике на кнопку\r\n                    />\r\n                </div>\r\n                <PostList \r\n                    posts={visiblePosts}\r\n                    onDeletePost ={this.deleteItem}\r\n                    onToggleImportant = {this.onToggleImportant} //отвечает за переключение звездочек\r\n                    onToggleLiked = {this.onToggleLiked} //отвечает за переключение лайков\r\n                /> \r\n                <PostAddForm \r\n                    onAdd = {this.addItem}/>\r\n            </AppBlock>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\n//При нажатии на кнопку мусор срабатывает событие onClick, ктр запускает фун-ии и полс фун-ия заканивается на deleteItem\r\n\r\n\r\n","import App from \"./app\";\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './components/app';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}